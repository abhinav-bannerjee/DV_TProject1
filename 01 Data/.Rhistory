library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("extrafont", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggthemes")
install.packages("ggplots")
install.packages("plots")
install.packages("gplots")
install.packages("jsonlite")
install.packages("lubridate")
install.packages("RCurl")
install.packages("reshape2")
install.packages("tableplot")
install.packages("tidyr")
require("ggplot2")
require("ggthemes")
require("gplots")
require("grid")
require("RCurl")
require("reshape2")
require("rstudio")
require("tableplot")
require("tidyr")
require("dplyr")
require("jsonlite")
require("extrafont")
require("lubridate")
install.packages(c("class", "MASS", "nnet", "spatial"))
require("ggplot2")
require("ggthemes")
require("gplots")
require("grid")
require("RCurl")
require("reshape2")
require("rstudio")
require("tableplot")
require("tidyr")
require("dplyr")
require("jsonlite")
require("extrafont")
require("lubridate")
require("ggplot2")
require("ggthemes")
require("gplots")
require("grid")
require("RCurl")
require("reshape2")
require("rstudio")
require("tableplot")
require("tidyr")
require("dplyr")
require("jsonlite")
require("extrafont")
require("lubridate")
source('~/DataVisualization/DrCannata/.Rprofile')
source('~/DataVisualization/DrCannata/.Rprofile')
head(diamonds)
names(diamonds)
View(diamonds)
?diamonds
summary(diamonds)
head(subset(diamonds, select = c(carat, cut)))
head(subset(diamonds, cut == "Ideal" & price > 5000))
View(diamonds)
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=mean(price, na.rm = TRUE))
require("plyr")
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=mean(price, na.rm = TRUE))
?summarise
?~
A
?~color
?na.omit.data.frame
?na.rm
?na
head(subset(diamonds, select = c(carat, cut)))
head(subset(diamonds, cut == "Ideal" & price > 5000))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=mean(price, na.rm = TRUE))
head(subset(diamonds, cut == "Ideal" & price > 5000),700)
head(subset(diamonds, cut == "Ideal" & price > 5000),1)
head(subset(diamonds, cut == "Ideal" & price > 5000))
View(diamonds)
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=mean(price, na.rm = TRUE))
View(summarise)
View(summarise)
View(summarise)
View(summarize)
diamonds
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=mean(price, na.rm = TRUE))
ddply(subset(diamonds, cut == "Ideal" & price > 5000),~color, summarise, o=mean(price, na.rm = FALSE))
x <- c(1,2,NA,3)
mean(x)
mean(x, na.rm=TRUE)
mean(x, na.rm=FALSE)
source('~/DataVisualization/Drcannata/RWorkshop/02 RESTful Data Access/Access Oracle Database.R')
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp order by job"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_kc35827', PASS='orcl_kc35827', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
View(df)
df
source('~/DataVisualization/Drcannata/RWorkshop/02 RESTful Data Access/Access Oracle Database.R')
View(df)
df
View(df)
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp order by job"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_kc35827', PASS='orcl_kc35827', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
View(df)
source('~/DataVisualization/DrCannata/.Rprofile')
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp order by job"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_kc35827', PASS='orcl_kc35827', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
df
head(df)
ggplot(df,aes(x=empno,y=SAL,color=variable))+ geom_line()
ggplot(df,aes(x=EMPNO,y=SAL,color=variable))+ geom_line()
ggplot(df,aes(x=empno,y=SAL,color=JOB))+ geom_line()
ggplot(df,aes(x=EMPNO,y=SAL,color=JOB))+ geom_line()
str(df)
df[JOB]
?lapply
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Customer_ID", "Order_ID", "Postal_Code", "Row_ID", "Discount", "Gross_Profit_Ratio" , "Number_of_Records", "Order_Quantity", "Product_Base_Margin", "Profit", "Sales", "Shipping_Cost", "Unit_Price")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
View(df)
df[d]
View(df)
if( length(measures) > 1 || ! is.na(dfdimensions)) {
for(d in dimensions) {
df <- read.csv(file_path, stringsAsFactors = FALSE)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
file_path <- "April16AdvTblCalc.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
file_path <- "April16AdvTblCalc.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
file_path <- "April16AdvTblCalc.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
pwd
?pwd
require(tidyr)
require(dplyr)
require(ggplot2)
tbl_df(diamonds)
View(diamonds)
# select
select(diamonds, cut, clarity) %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds;
diamonds %>% select(cut, clarity) %>% tbl_df
diamonds %>% select(., cut, clarity) %>% tbl_df
diamonds %>% select(color:price) %>% tbl_df # Equivalent SQL: none
diamonds %>% select(-cut, -clarity) %>% tbl_df # Equivalent SQL: none
x <- diamonds %>% select(cut, clarity) %>% tbl_df
x
# filter
diamonds %>% select(cut, clarity) %>% filter(cut == "Good") %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds where cut = 'Good';
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair")) %>% tbl_df
# select cut, clarity from diamonds where cut in ('Good', 'Fair');
# select cut, clarity from diamonds where cut = 'Good' or cut = 'Fair';
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1") %>% tbl_df
# select cut, clarity from diamonds where (cut = 'Good' or cut = 'Fair') and clarity = 'VS1';
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% tbl_df
# select cut, clarity from diamonds where ((cut = 'Good' or cut = 'Fair') and clarity = 'VS1') or cut is null;
# diamonds %>% select(cut, clarity) %>% filter(carat > 2) %>% tbl_df # This will give an error
# select cut, clarity  from diamonds  where carat > 2;
diamonds %>% filter(carat > 2) %>% select(cut, clarity) %>% tbl_df # This does not give an error.
diamonds %>% select(carat, clarity) %>% filter(carat > 2) %>% tbl_df
# select carat, clarity  from diamonds  where carat > 2;
# arrange
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x), y) %>% tbl_df
diamonds %>% arrange(carat) %>% tbl_df
# select * from diamonds order by carat;
diamonds %>% arrange(desc(carat)) %>% tbl_df
# select * from diamonds order by carat desc;
# rename
diamonds %>% rename(tbl= table) %>% tbl_df
# mutate
diamonds %>% select(cut, clarity, x, y, z) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% mutate(sum = x+y+z) %>% tbl_df
# select cut, clarity, x+y+z sum from diamondswhere ((cut = 'Good' or cut = 'Fair') and clarity = 'VS1') or cut is null
ndf <- diamonds %>% select(cut, clarity, x, y, z) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% mutate(sum = x+y+z) %>% tbl_df
ndf
# Useful mutate functions:
# pmin(), pmax() Parallel, Element-wise min and max
# cummin(), cummax() Cumulative min and max
# cumsum(), cumprod() Cumulative sum and product
# Windowing functions
# between() Are values between a and b?
# cume_dist() Cumulative distribution of values
# cumall(), cumany() Cumulative all and any
# cummean() Cumulative mean
# lead(), lag() Copy with values one position
# ntile() Bin vector into n buckets
# dense_rank(), min_rank(),
# percent_rank(), row_number() Various ranking methods
pmin(c(1:5), (5:1)) # Pairwise min
diamonds %>% mutate(minxy = pmin(x,y)) %>% tbl_df
pmax(c(1:5), (5:1)) # Pairwise max
c(1,1,2,0,4,3,5) %>% cummin()
diamonds %>% mutate(cummin_x = cummin(x)) %>% tbl_df
c(1,1,2,5,4,3,5) %>% cummax()
c(1,1,2,3,4,3,5) %>% cumsum()
diamonds %>% mutate(cumsum_x = cumsum(x)) %>% tbl_df
c(1,1,2,3,4,3,5) %>% cumprod()
c(1,1,2,3,4,3,5) %>% between(2,4)
diamonds %>% mutate(between_x = between(x,4,4.1)) %>% tbl_df
c(1:5) %>% cummean()
c(1:5) %>% lead() - c(1:5)
diamonds %>% mutate(lead_z = lead(z)-z) %>% tbl_df
c(1:5) %>% lag() - c(1:5)
diamonds %>% mutate(lag_z = lag(z)-z) %>% tbl_df
c(1:10)
c(1:10) %>% ntile(4) # bucket edges are rounded
diamonds %>% mutate(ntile_z = ntile(z,100)) %>% arrange(desc(ntile_z)) %>% tbl_df
diamonds %>% mutate(ntile_z = ntile(z,100)) %>% group_by(ntile_z) %>% summarise(n=n()) %>% tbl_df
c(1,1,2,5,4,3,5) %>% cume_dist()
c(1:5) %>% cume_dist()
c(1,1:5) %>% cume_dist()
# c(TRUE, TRUE, FALSE, FALSE, TRUE) %>% cumall()
# c(FALSE, TRUE, FALSE, FALSE, TRUE) %>% cumany()
# Now let's try them in the mutate function
diamonds %>% mutate(price_percent = cume_dist(price)) %>% arrange(desc(price_percent)) %>% tbl_df
# select d.*, cume_dist() OVER (order by price) cume_dist from diamonds d order by 11 desc;
# select d.*, cume_dist() OVER (PARTITION BY cut order by price) cume_dist from (select * from diamonds where rownum < 100) d order by cut desc, 11 desc;
bottom20_diamonds <- diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent <= .20) %>% arrange(desc(price_percent)) %>% tbl_df
diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent >= .80) %>% arrange(desc(price_percent)) %>% tbl_df
top20_diamonds <- diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent >= .80) %>% arrange(desc(price_percent)) %>% tbl_df
diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent <= .20 | price_percent >= .80) %>% ggplot(aes(x = price, y = carat)) + geom_point(aes(color=cut))
# summarize (summarise)
diamonds %>% summarize(mean = mean(x), sum = sum(x,y,z), n = n())
# Useful Summary functions:
# min(), max() Minimum and maximum values
# mean() Mean value
# median() Median value
# sum() Sum of values
# var, sd() Variance and standard deviation of a vector
# first() First value in a vector
# last() Last value in a vector
# nth() Nth value in a vector
# n() The number of values in a vector
# n_distinct() The number of distinct values in a vector
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n())
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% ungroup %>% summarize(sum(n))
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% arrange(n)
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% arrange(desc(n), cut, color)
diamonds %>% group_by(cut, color, clarity) %>% summarise(mean_carat = mean(carat)) %>% ggplot(aes(x=cut, y=mean_carat, color=color)) + geom_point() + facet_wrap(~clarity)
diamonds %>% summarise(mean_price = mean(price), num_rows =n())
？n()
?n()
mean(price)) %>% arrange(cut, color, mean_price)
diamonds %>% group_by(cut,color) %>% summarise(mean_price =mean(price)) %>% arrange(cut, color, mean_price)
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=(5:1), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=(1:5), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x), y) %>% tbl_df
diamonds %>% arrange(carat) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=(1:5), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=(1:5), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x), y) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=c(1:5), z=(1:5)) %>% arrange(desc(x), y) %>% tbl_df
pmin(c(1:5), (5:1)) # Pairwise min
pmin((1:5), (5:1)) # Pairwise min
pmax(c(1:5), (5:1)) # Pairwise max
c(1,1,2,0,4,3,5) %>% cummin()
diamonds %>% mutate(cummin_x = cummin(x)) %>% tbl_df
c(1,1,2,3,4,3,5) %>% cumsum()
c(1,1,2,3,4,3,5) %>% cumprod()
c(1,1,2,3,4,3,5) %>% between(2,4)
diamonds %>% mutate(between_x = between(x,4,4.1)) %>% tbl_df
c(1:5) %>% cummean()
c(1:5) %>% lead() - c(1:5)
lead()
lead() - c(1:5)
c(1:5) %>% lag() - c(1:5)
diamonds %>% mutate(cumsum_x = cumsum(x)) %>% tbl_df
c(1:5) %>% lag()
c(1:10) %>% ntile(4) # bucket edges are rounded
c(1:10) %>% ntile(1) # bucket edges are rounded
c(1:10) %>% ntile(10) # bucket edges are rounded
c(1:10) %>% ntile(9) # bucket edges are rounded
diamonds %>% mutate(ntile_z = ntile(z,100)) %>% arrange(desc(ntile_z)) %>% tbl_df
diamonds %>% mutate(ntile_z = ntile(z,100)) %>% group_by(ntile_z) %>% summarise(n=n()) %>% tbl_df
c(1,1,2,5,4,3,5) %>% cume_dist()
?ntile
c(1:10) %>% ntile(4) # bucket edges are rounded
c(1:10) %>% ntile(3) # bucket edges are rounded
(1:10) %>% ntile(3) # bucket edges are rounded
(1:2) %>% ntile(3) # bucket edges are rounded
(1:3) %>% ntile(3) # bucket edges are rounded
(1:4) %>% ntile(3) # bucket edges are rounded
(1:5) %>% ntile(3) # bucket edges are rounded
(1:10) %>% ntile(3) # bucket edges are rounded
diamonds %>% mutate(ntile_z = ntile(z,100)) %>% group_by(ntile_z) %>% summarise(n=n()) %>% tbl_df
()
c(1,1,2,5,4,3,5) %>% cume_dist()
c(1:5) %>% cume_dist()
c(5:1) %>% cume_dist()
c(1,1:5) %>% cume_dist()
c(TRUE, TRUE, FALSE, FALSE, TRUE) %>% cumall()
c(FALSE, TRUE, FALSE, FALSE, TRUE) %>% cumany()
?cum_all
>cumall
?cumall
c(1:5) %>% cumall()
c(1:5) %>% cumany()
c(1:5) %>% cumany(>5)
c(TRUE, TRUE, FALSE, FALSE, FALSE) %>% cumall()
c(TRUE, TRUE, FALSE, FALSE, TRUE) %>% cumall()
c(TRUE, FALSE, FALSE, FALSE, TRUE) %>% cumall()
c(TRUE, FALSE, FALSE, TRUE, TRUE) %>% cumall()
c(FALSE, FALSE, FALSE, TRUE, TRUE) %>% cumall()
c(FALSE, FALSE, TRUE, TRUE, TRUE) %>% cumall()
c(FALSE, FALSE, FALSE, FALSE, TRUE) %>% cumany()
c(TRUE, FALSE, FALSE, FALSE, TRUE) %>% cumany()
diamonds %>% mutate(price_percent = cume_dist(price)) %>% arrange(desc(price_percent)) %>% tbl_df
require(tidyr)
require(dplyr)
require(ggplot2)
diamonds %>% mutate(price_percent = cume_dist(price)) %>% arrange(desc(price_percent)) %>% tbl_df
diamonds %>% mutate(price_percent = cume_dist(n(row)<100)) %>% arrange(desc(price_percent)) %>% tbl_df
diamonds %>% mutate(price_percent = cume_dist(n()<100)) %>% arrange(desc(price_percent)) %>% tbl_df
tbl_df(diamonds)
diamonds %>% mutate(price_percent = cume_dist(n()<100)) %>% arrange(desc(price_percent)) %>% tbl_df
diamonds %>% mutate(price_percent = cume_dist(n()<100)) %>% arrange(desc(price_percent)) %>% tbl_df
# select d.*, cume_dist() OVER (order by price) cume_dist from diamonds d order by 11 desc;
# select d.*, cume_dist() OVER (PARTITION BY cut order by price) cume_dist from (select * from diamonds where rownum < 100) d order by cut desc, 11 desc;
diamonds %>% mutate(minxy = pmin(x,y)) %>% tbl_df
setwd("~/DV_TProject1/01 Data")
file_path <- "2016 FE Guide for DOE.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
View(df)
